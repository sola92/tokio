// flow-typed signature: ffa7a92752892ff260dbf7d6a0afeb68
// flow-typed version: <<STUB>>/ethereumjs-tx_v^1.3.7/flow_v0.79.1

/**
 * This is an autogenerated libdef stub for:
 *
 *   'ethereumjs-tx'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

/* eslint-disable no-unused-vars */

import { BN } from "bn.js";

declare module "ethereumjs-tx" {
  declare class Transaction {
    constructor(
      rawTransaction:
        | {
            nonce?: ?(string | number | Buffer),
            chainId?: ?(string | number | Buffer),
            to?: ?(string | Buffer),
            data?: ?(string | Buffer),
            value?: ?(string | Buffer),
            r?: ?(string | Buffer),
            s?: ?(string | Buffer),
            v?: ?(string | Buffer),
            gasPrice?: ?(string | number | Buffer)
          }
        | Buffer
    ): Transaction;
    // the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
    getBaseFee(): BN;

    // returns the public key of the sender
    getChainId(): Buffer;

    // The amount of gas paid for the data in this tx
    getDataFee(): Buffer;

    // returns the sender's address
    getSenderAddress(): Buffer;

    // returns the public key of the sender
    getSenderPublicKey(): Buffer;

    // the up front amount that an account must have for this transaction to be valid
    getUpfrontCost(): BN;

    // Computes a sha3-256 hash of the serialized tx
    hash(includeSignature?: boolean /* defaults to true*/): Buffer;

    // If the tx's to is to the creation address
    toCreationAddress(): boolean;

    // validates the signature and checks to see if it has enough gas
    validate(stringError?: boolean /*defaults to false*/): boolean | string;

    // Determines if the signature is valid
    verifySignature(): boolean;

    // Returns the rlp encoding of the transaction
    serialize(): Buffer;

    // sign a transaction with a given a private key
    sign(privateKey: Buffer): void;
  }

  declare module.exports: Class<Transaction>;
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module "ethereumjs-tx/coverage/lcov-report/prettify" {
  declare module.exports: any;
}

declare module "ethereumjs-tx/coverage/lcov-report/sorter" {
  declare module.exports: any;
}

declare module "ethereumjs-tx/es5/index" {
  declare module.exports: any;
}

declare module "ethereumjs-tx/examples/transactions" {
  declare module.exports: any;
}

declare module "ethereumjs-tx/fake" {
  declare module.exports: any;
}

declare module "ethereumjs-tx/karma.conf" {
  declare module.exports: any;
}

// Filename aliases
declare module "ethereumjs-tx/coverage/lcov-report/prettify.js" {
  declare module.exports: $Exports<
    "ethereumjs-tx/coverage/lcov-report/prettify"
  >;
}
declare module "ethereumjs-tx/coverage/lcov-report/sorter.js" {
  declare module.exports: $Exports<"ethereumjs-tx/coverage/lcov-report/sorter">;
}
declare module "ethereumjs-tx/es5/index.js" {
  declare module.exports: $Exports<"ethereumjs-tx/es5/index">;
}
declare module "ethereumjs-tx/examples/transactions.js" {
  declare module.exports: $Exports<"ethereumjs-tx/examples/transactions">;
}
declare module "ethereumjs-tx/fake.js" {
  declare module.exports: $Exports<"ethereumjs-tx/fake">;
}
declare module "ethereumjs-tx/index" {
  declare module.exports: $Exports<"ethereumjs-tx">;
}
declare module "ethereumjs-tx/index.js" {
  declare module.exports: $Exports<"ethereumjs-tx">;
}
declare module "ethereumjs-tx/karma.conf.js" {
  declare module.exports: $Exports<"ethereumjs-tx/karma.conf">;
}
